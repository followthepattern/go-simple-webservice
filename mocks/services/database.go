// Code generated by MockGen. DO NOT EDIT.
// Source: ./memory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/followthepattern/go-simple-webservice/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockDatabase) AddUser(user models.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUser", user)
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDatabaseMockRecorder) AddUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDatabase)(nil).AddUser), user)
}

// DeleteAllUser mocks base method.
func (m *MockDatabase) DeleteAllUser() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllUser")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllUser indicates an expected call of DeleteAllUser.
func (mr *MockDatabaseMockRecorder) DeleteAllUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllUser", reflect.TypeOf((*MockDatabase)(nil).DeleteAllUser))
}

// DeleteUser mocks base method.
func (m *MockDatabase) DeleteUser(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDatabaseMockRecorder) DeleteUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDatabase)(nil).DeleteUser), userID)
}

// GetAllUser mocks base method.
func (m *MockDatabase) GetAllUser() []models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUser")
	ret0, _ := ret[0].([]models.User)
	return ret0
}

// GetAllUser indicates an expected call of GetAllUser.
func (mr *MockDatabaseMockRecorder) GetAllUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUser", reflect.TypeOf((*MockDatabase)(nil).GetAllUser))
}

// GetUserByID mocks base method.
func (m *MockDatabase) GetUserByID(userID string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockDatabaseMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockDatabase)(nil).GetUserByID), userID)
}

// GetUserCount mocks base method.
func (m *MockDatabase) GetUserCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetUserCount indicates an expected call of GetUserCount.
func (mr *MockDatabaseMockRecorder) GetUserCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCount", reflect.TypeOf((*MockDatabase)(nil).GetUserCount))
}

// UpdateUser mocks base method.
func (m *MockDatabase) UpdateUser(userID string, user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDatabaseMockRecorder) UpdateUser(userID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDatabase)(nil).UpdateUser), userID, user)
}
